Todo

- CNF background
- Using Truth Table
- Using CNF logical conversion

Grammar
	Operator Precedence / Right Associative
	Parse tree
Example hand written 
Logical Equivalence Rules
Python equivalent
To cnf

(a xor (b xor c))
a xor ((b ∧ ¬c) | ( ¬b ∧ c))
(a ∧ ¬((b ∧ ¬c) | ( ¬b ∧ c))) | (¬a ∧ ((b ∧ ¬c) | ( ¬b ∧ c)))
(a ∧ (¬(b ∧ ¬c) & ¬( ¬b ∧ c))) | (¬a ∧ ((b ∧ ¬c) | ( ¬b ∧ c)))
(a ∧ ((¬b | c) ∧ (b | ¬c))) | (¬a ∧ ((b ∧ ¬c) | ( ¬b ∧ c)))

(a | ¬a) ∧ (a | (¬a ∧ ((b ∧ ¬c) | ( ¬b ∧ c)))) ∧
(((¬b | c) ∧ (b | ¬c)) | ¬a) ∧
((¬b | c) ∧ (b | ¬c)) | ((b ∧ ¬c) | ( ¬b ∧ c))



References

https://www.cs.jhu.edu/~jason/tutorials/convert-to-CNF.html
https://www.cse.iitb.ac.in/~akg/courses/2020-ar/
https://www.cs.jhu.edu/~jason/325/
Grammars for Propositional Logic
https://www.youtube.com/watch?v=2mF471Tn27Q

https://www.ifi.uzh.ch/en/ailab/teaching/formalmethods2013.html
ANTLR grammar for prop logic


~(a v ~b v (c -> d))
~a v b
a | b | c | e -> f

Operator Tree

precedence
~, ^, v, ->, <->

Operator precedence + right associative
s: "~x -> y | z -> x | y | z" 
exp: "(~x -> ((y | z) -> (x | (y | z))))" "

s: "p | q | r -> s" 
exp: "((p | (q | r)) -> s)" "


TODO

- XOR not implemented



~
grammar boolean ;
2
3 entry : equivalence EOF ;
4 equivalence : implication
5 ( '<->' implication )* ;
6 implication : disjunction
7 ( '->' disjunction )* ;
8 disjunction : conjunction
9 ( '||' conjunction )* ;
10 conjunction : negation
11 ( '&&' negation )* ;
12 negation : '!' parenthesis
13 | parenthesis ;
14 parenthesis : '(' equivalence ')'
15 | atom ;
16 atom : 'T' | 'F' | VARIABLE ;
17 VARIABLE : ('a '.. 'z ')+ ;

(a v b) -> (c -> d)
(a v b) -> (~c v d)
~(a v b) v (~c v d)
(~a & ~b) v (~c v d)
(~c v d) v (~a & ~b)
((~c v d) v ~a) & ((~c v d) v ~b)
(~a v ~c v d) & (~b v ~c v d)

TT

p | ~(q -> r)
p ∨ ¬(~q | r)
p ∨ (q & ~r)
(p ∨ q) & (p ∨ ~r)

(p ∨ ¬q ∨ ¬r) ∧ (p ∨ q ∨ ¬r) ∧ (p ∨ q ∨ r)



https://ocw.mit.edu/courses/health-sciences-and-technology/hst-947-medical-artificial-intelligence-spring-2005/lecture-notes/ch10_logic2a.pdf

https://leanprover.github.io/logic_and_proof/first_order_logic_in_lean.html


~(a | ~(b | ~(c | d)))
~(a | ~(b | (~c & ~d)))
~(a | (~b & ~(~c & ~d)))
~(a | (~b & (c | d)))
(~a & ~(~b & (c | d)))
(~a & (b | ~(c | d)))
(~a & (b | (~c & ~d)))

~(a -> ~(b -> ~(c -> d)))
~(~a | ~(b -> ~(c -> d)))
~(~a | ~(~b | ~(c -> d)))
(a & (~b | ~(~c | d)))
(a & (~b | (c & ~d)))

((a) & ((~(b)) | ((c) & (~(d)))))")



~(b | ~(c | d))
~(b | (~c & ~d))
(~b & ~(~c & ~d))
(~b & (c | d))
((~(b)) & ((c) | (d)))


~~~
a | (((d & e) | g))

(d | g) & 

or
	a
	or
		and
			d
			e
		g

a | (((d & e) | g))

a | ((d | g) & (e | g))

(a | d | g) & (a | e | g)
~~~

Oper precedence + right associative
s: "~x -> y | z -> x | y | z" 
exp: "(~x -> ((y | z) -> (x | (y | z))))" "

